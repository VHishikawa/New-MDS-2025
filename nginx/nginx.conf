# nginx/nginx.conf - VERSÃO CORRIGIDA E OTIMIZADA

worker_processes auto;

events {
    worker_connections 2048;
}

http {
    # --- CONFIGURAÇÕES GLOBAIS DE PROXY (Estão ótimas!) ---
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_connect_timeout 90s;
    proxy_read_timeout 90s;
    client_max_body_size 1G;

    # Adiciona o resolvedor DNS do Docker. Perfeito!
    resolver 127.0.0.11 valid=30s;

    server {
        listen 80;
        server_name mds-server.local; 

        # --- ORQUESTRAÇÃO E PROCESSAMENTO ---

        # Airflow: Já configurado com BASE_URL, então ele espera o /airflow/.
        location /airflow/ {
            proxy_pass http://airflow_webserver:8080;
        }

        # Spark: Não tem configuração de base_url nativa fácil.
        location /spark/ {
            # Como o Spark já está configurado para proxy reverso,
            # apenas repassamos a requisição.
            proxy_pass http://spark-master:8080;
        }

        # Flink: Também não tem configuração de base_url.
        location /flink/ {
            rewrite ^/flink/(.*) /$1 break;
            proxy_pass http://flink-jobmanager:8081/;
        }

        # --- ARMAZENAMENTO E BANCOS DE DADOS ---

        # MinIO: A UI não tem configuração de base_url.
        location /minio/ {
            rewrite ^/minio/(.*) /$1 break;
            proxy_pass http://minio_storage:9001/;
        }

        # Neo4j: A UI é uma SPA que espera estar na raiz.
        location /neo4j/ {
            rewrite ^/neo4j/(.*) /$1 break;
            proxy_pass http://neo4j_db:7474/;
        }

        # --- STREAMING (CONFLUENT PLATFORM) ---

        # Control Center: Geralmente não tem config de base_url.
        location /control-center/ {
            rewrite ^/control-center/(.*) /$1 break;
            proxy_pass http://kafka_control_center:9021/;
        }

        # --- INGESTÃO E GOVERNANÇA ---

        # NiFi: Configurado com NIFI_WEB_PROXY_CONTEXT_PATH=/nifi, ele espera o caminho.
        location /nifi/ {
            proxy_pass http://nifi:8080; 
        }

        # OpenMetadata: Configurado com OPENMETADATA_SERVER_URL.
# --- INGESTÃO E GOVERNANÇA ---
    # Este é o bloco principal, que já está correto. Mantenha-o.
        location /openmetadata/ {
            rewrite ^/openmetadata/(.*) /$1 break;
            proxy_pass http://openmetadata-server:8585/;
        }

        # --- BLOCOS DE BYPASS PARA O OPENMETADATA ---
        # Adicione estes novos blocos abaixo do principal

        # Pega os arquivos JS (main-....js) que ele pede no lugar errado
        location ~ ^/main-.*\.js {
            proxy_pass http://openmetadata-server:8585;
        }

        # Pega as imagens que ele pede no lugar errado
        location /images/ {
            proxy_pass http://openmetadata-server:8585/images/;
        }

        # Pega os ícones que ele pede no lugar errado
        location /favicons/ {
            proxy_pass http://openmetadata-server:8585/favicons/;
        }
        location = /favicon.png {
            proxy_pass http://openmetadata-server:8585/favicon.png;
        }

        # --- VISUALIZAÇÃO E FERRAMENTAS ---

        location /superset/ {
            rewrite ^/superset/(.*) /$1 break;
            proxy_pass http://superset_app:8088/;
        }

        # --- BLOCO DE BYPASS PARA O SUPERSET ---
        # Adicione este novo bloco para capturar os assets pedidos no lugar errado
        location /static/ {
            rewrite ^/static/(.*) /static/$1 break;
            proxy_pass http://superset_app:8088;
        }
        # Kibana: Configurado com SERVER_PUBLIC_BASEURL=/kibana
        location /kibana/ {
            # TENTATIVA FINAL: Adicionando o caminho no final do proxy_pass
            proxy_pass http://kibana:5601/kibana/;
        }

        # Trino: UI não tem config de base_url.
        location /trino/ {
            rewrite ^/trino/(.*) /$1 break;
            proxy_pass http://trino-coordinator:8080/;
        }

        # DBeaver (CloudBeaver): UI espera estar na raiz.
        location /dbeaver/ {
            rewrite ^/dbeaver/(.*) /$1 break;
            proxy_pass http://dbeaver_ui:8978/;
        }

        # Jupyter: Requer a configuração de base_url no jupyter_notebook_config.py
        location /jupyter/ {
            proxy_pass http://notebook-spark:8888; 
        }

        # Hive Server UI: UI muito simples, sem config de base_url.
        location /hiveserver/ {
            rewrite ^/hiveserver/(.*) /$1 break;
            proxy_pass http://hive-server:10002/;
        }

        # --- ANÁLISE EM TEMPO REAL ---

        # ClickHouse UI (Play): UI simples.
        location /clickhouse/ {
            rewrite ^/clickhouse/(.*) /$1 break;
            proxy_pass http://clickhouse_server:8123/;
        }

        # Pinot Controller UI: UI simples.
        location /pinot/ {
            rewrite ^/pinot/(.*) /$1 break;
            proxy_pass http://pinot-controller:9000/;
        }

        # --- CI/CD E MONITORAMENTO ---

        # Jenkins: Configurado com --prefix=/jenkins
        location /jenkins/ {
            proxy_pass http://jenkins_ci_cd:8080;
        }

        # Prometheus: Configurado com --web.external-url
        location /prometheus/ {
            proxy_pass http://prometheus:9090;
        }


        location /grafana/ {
            # Esta linha corrige o loop de redirecionamento adicionando a barra final.
            rewrite ^/grafana$ /grafana/ permanent;

            # O Grafana já sabe seu caminho, então apenas repassamos a requisição.
            proxy_pass http://grafana:3000;
        }

        location /n8n/ {
            # Esta regra remove o /n8n/ antes de enviar para o backend
            rewrite ^/n8n/(.*) /$1 break;

            # A barra no final do proxy_pass é essencial aqui
            proxy_pass http://n8n:5678/;
        }
    }
}